#!/usr/bin/env python

import argparse
import BaseHTTPServer
import logging
import re
import SimpleHTTPServer
import SocketServer
import ssl
import sys

class EchoHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):

    def do_GET(self):
        logging.info("Request from %s:%s -- %s" % (self.client_address[0], self.client_address[1], self.requestline))
        logging.info("Headers:\n\t" + re.sub(r'\n', '\n\t', str(self.headers)))
        SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
    
    def do_POST(self):
        logging.info("Request from %s:%s -- %s" % (self.client_address[0], self.client_address[1], self.requestline))
        logging.info("Headers:\n\t" + re.sub(r'\n', '\n\t', str(self.headers)))
        if ("expect: 100-continue" in str(self.headers).lower()):
            logging.info("Got 'Expect: 100-Continue'")
            SimpleHTTPServer.SimpleHTTPRequestHandler.send_response(self, 100, "Continue")
            logging.info("Sent '100 Continue' response")
        content = self.rfile.read(int(self.headers.getheader('Content-Length')))
        logging.info("Content:\n\t>" + re.sub(r'\n', '<\n\t>', content) + "<")
        SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)


def run_server(port, ssl_cert_file):
    if not ssl_cert_file:
        httpd = SocketServer.TCPServer(("", port), EchoHandler)
        sys.stderr.write("Listening for HTTP on %d.\n" % port)
    else:
        httpd = BaseHTTPServer.HTTPServer(("", port), EchoHandler)
        httpd.socket = ssl.wrap_socket(httpd.socket, certfile=ssl_cert_file, server_side=True)
        sys.stderr.write("Listening for HTTPS on %d.\n" % port)

    httpd.serve_forever()

def parse_arguments():
    '''
    Parse the command line arguments.
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--port', type=int, default=8000,
        help="port on which to bind the HTTP server (default: 8000)")
    parser.add_argument('--ssl', type=str,
        help="path to PEM-encoded certificates and key. If this is provided, " \
            + "server will listen for HTTPS requests instead of HTTP")
    return parser.parse_args()

def main(args):
    '''
    Run the server from the command line.
    '''
    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)
    run_server(args.port, args.ssl)
    
if __name__ == '__main__':
    try:
        main(parse_arguments())
    except KeyboardInterrupt:
        sys.stderr.write("Shutting down.\n")
        sys.exit(0)
