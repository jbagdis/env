##############################################################################
### Preferences
##############################################################################

# Silent mode suppresses startup diagnostic messages
SILENT_MODE=false

# Memoization saves some environment variables set by expensive initialization scripts
# to speed up the launch time for new shell sessions
ENABLE_MEMOIZATION=true

# Whether to memoize the environment even if there were some failures
MEMOIZE_FAILURES=false

# allow preferences to be overridden by local config
if [ -e ~/.profile.preferences ]; then
  source ~/.profile.preferences
fi


##############################################################################
### State Variables
##############################################################################
NO_FAILURE_HAS_OCCURRED=true


##############################################################################
### Startup diagnostic message Functions
##############################################################################
_msg() {
	${SILENT_MODE} || ([[ $- == *i* ]] && echo "$1")
}
_start() {
	${SILENT_MODE} || ([[ $- == *i* ]] && echo -n "$1 $(printf '\055%.0s' {1..64})" | head -c 69)
}
_done() {
	${SILENT_MODE} || ([[ $- == *i* ]] && echo " [ ${BLUE}DONE${NORMAL} ]")
}
_fail() {
  NO_FAILURE_HAS_OCCURRED=false
	${SILENT_MODE} || ([[ $- == *i* ]] && echo " [ ${RED}FAIL${NORMAL} ]" && echo "\t$1" >&2)
}
_yes() {
	${SILENT_MODE} || ([[ $- == *i* ]] && echo " [  ${GREEN}OK${NORMAL}  ]")
}
_no() {
	${SILENT_MODE} || ([[ $- == *i* ]] && echo " [  ${YELLOW}NO${NORMAL}  ]")
}


##############################################################################
### Profile memoization utility functions
##############################################################################
save_env_snapshop() {
  MEMO_TMPDIR=$(mktemp -d)
  env | sort > "${MEMO_TMPDIR}/before"
}
load_memoized_profile() {
  LOADED_MEMOIZED_PROFILE=false
  PROFILE_CHECKSUM="$(cat "${HOME}/.profile" "${HOME}/.profile.local" "${HOME}/.profile.preferences" 2>/dev/null | shasum)"
  _start "Checking if memoized environment exists"
  if [ -e ~/.profile.memoized ]; then
    _yes
    _start "Checking if memoized environment is up to date"
    source ~/.profile.memoized
    if ${LOADED_MEMOIZED_PROFILE}; then
      _done
    else
      _no
      return -2
    fi
  else
    _no
    return -1
  fi
}
save_memoized_profile() {
  if ${LOADED_MEMOIZED_PROFILE}; then
    true
  elif ${ENABLE_MEMOIZATION}; then
    if ${NO_FAILURE_HAS_OCCURRED} || ${MEMOIZE_FAILURES}; then
      _start "Memoizing Environment"
      echo '''
        MEMO_PROFILE_CHECKSUM="CHECKSUM_TOKEN_GOES_HERE"
        if [[ "${MEMO_PROFILE_CHECKSUM}" != "${PROFILE_CHECKSUM}" ]]; then
          return
        fi
        _yes
        _start "Loading Memoized Environment"
      ''' |
        sed "s/^    //" |
        sed "s/CHECKSUM_TOKEN_GOES_HERE/${PROFILE_CHECKSUM}/" > ~/.profile.memoized
      env | sort > "${MEMO_TMPDIR}/after"
      comm -13 "${MEMO_TMPDIR}/before" "${MEMO_TMPDIR}/after" | sed "s/^/export /" | sed 's/=/="/' | sed 's/$/"/' >> ~/.profile.memoized
      rm -rf "${MEMO_TMPDIR}"
      echo '''
        LOADED_MEMOIZED_PROFILE=true
      ''' | sed "s/^    //" >> ~/.profile.memoized
      _done
    else
      _msg "Skipping profile memoization because a failure has occurred."
    fi
  fi
}


##############################################################################
### Main profile initialization functions
##############################################################################
init_colors() {
  _start "Setting up color variables"
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  BOLD=""
  NORMAL=""
  [[ $- == *i* ]] || (_fail && return)
  if which tput >/dev/null 2>&1; then
      local ncolors=$(tput colors)
  fi
  if [ -t 1 ] && [ -n "${ncolors}" ] && [ "${ncolors}" -ge 8 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    BOLD="$(tput bold)"
    NORMAL="$(tput sgr0)"
    _done
  else
    _fail
  fi
}

set_shell() {
  ps -p $(echo "$$") -o "comm=" | grep "zsh" >/dev/null 2>&1 && export SHELL="/bin/zsh"
}

set_path() {
  _start "Setting PATH"
  export PATH="${HOME}/.bin.local:${HOME}/bin:${HOME}/.jenv/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/opt/coreutils/libexec/gnubin"
  _done
}

set_aliases() {
  _start "Configuring aliases"
  alias l="ls -bFGhT"
  alias ll="ls -labFGhT"
  alias lle="ls -l@abeFGhT"
  alias gw="./gradlew"
  alias gwnd="gw --no-daemon"
  alias gitpush='git push || $(git push 2>&1 | grep "git push --set-upstream")'
  alias gitpull='git fetch --all --prune && git pull'
  alias gitbranchclean='git branch | grep -v master | xargs git branch -d'
  alias gitbranchcleanD='git branch | grep -v master | xargs git branch -D'
  alias pso='ps -o pid,user,%cpu,%mem,comm'
  alias rmm2='rm -rf ~/.m2'
  _done
}

set_umask() {
  _start "Setting umask"
  umask 022
  _done
}

setup_misc_env() {
  _start "Setting miscellaneous environment variables"
  export LESSEDIT='mate -l %lm %f'
  _done
}

setup_java() {
  _start "Initializing Java Environment"
  if command -v jenv >/dev/null 2>&1; then
    export JENV_ROOT=/usr/local/var/jenv
    eval "$(jenv init -)"
    _done
  else
    _fail "'jenv' is not installed"
  fi
}

setup_python() {
  _start "Initializing Python Environment"
  if command -v pyenv >/dev/null 2>&1; then
    eval "$(pyenv init -)"
    if command -v pyenv-virtualenv-init > /dev/null 2>&1; then
      eval "$(pyenv virtualenv-init -)"
      _done
    else
      _fail "'pyenv virtualenv' is not installed"
    fi
    #export WORKON_HOME=~/.virtualenv
    #source /usr/local/bin/virtualenvwrapper.sh
    #export NLTK_DATA="${HOME}/var/nltk_data"
  else
    _fail "'pyenv' is not installed"
  fi
}

setup_node() {
  _start "Initializing Node.js Environment"
  initialize_nvm() {
    export NVM_DIR="${HOME}/.nvm"
    mkdir -p "${NVM_DIR}"
    . "$1"
    _done
  }
  
  local homebrew_nvm="$(brew --prefix nvm 2>/dev/null)/nvm.sh"
  local local_nvm="${HOME}/.nvm/nvm.sh"
  if command -v brew >/dev/null 2>&1 && [[ -e "${homebrew_nvm}" ]]; then
    initialize_nvm "${homebrew_nvm}"
  elif [[ -e "${local_nvm}" ]]; then
    initialize_nvm "${local_nvm}"
  else
    unset NVM_DIR
    _fail "'nvm' is not installed"
  fi
}

setup_thefuck() {
  _start "Initializing thefuck"
  if command -v thefuck >/dev/null 2>&1; then
    eval $(thefuck --alias)
    _done
  else
    _fail "'thefuck' is not installed"
  fi
}

include_local_profile_customizations() {
  if [ -e ~/.profile.local ]; then
    source ~/.profile.local
  fi
}

##############################################################################
### Profile initialization routine
##############################################################################

set_shell
_msg "\n                 ${BOLD}####### Starting Shell (${SHELL}) #######${NORMAL}"
init_colors
set_path
set_aliases
set_umask
save_env_snapshop
setup_thefuck
initialize_memoizable_profile() {
  setup_misc_env
  setup_java
  setup_python
  setup_node
  include_local_profile_customizations
}
load_memoized_profile || initialize_memoizable_profile
save_memoized_profile

_msg ""

